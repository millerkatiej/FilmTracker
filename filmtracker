#!/usr/bin/env ruby

require_relative 'lib/environment'
require_relative 'lib/parse_arguments'

command = ARGV[0]
options = ParseArguments.parse
options[:name] ||= ARGV[1]

Environment.environment = options[:environment] || "production"
database = Environment.database_connection


if command == "search"
  puts "What do you want to search for?"
  input = $stdin.gets.chomp
  statement = "select * from films where name LIKE '%#{input}%' OR director LIKE '%#{input}%' OR year LIKE '%#{input}%' OR country LIKE '%#{input}%'  OR language LIKE '%#{input}%' OR distributor LIKE '%#{input}%' OR format LIKE '%#{input}%' OR notes LIKE '%#{input}%'"
  results = database.execute(statement)
  if results.empty?
    puts "Did not find: #{input}"
  else
    puts results
  end
elsif command == "add"
  error_messages = ParseArguments.validate(options)
  if error_messages.empty?
    film = Film.create(options)
    puts "You have created a film named #{film.name}, released in #{film.year}, directed by #{film.director}, from #{film.country}, in #{film.language}, distributed by #{film.distributor}, viewed on #{film.date}, with a viewing format of #{film.format}, given a personal rating of #{film.rating}, and the following notes: #{film.notes}."
  else
    puts error_messages
  end
elsif command == "list"
  print "All Films:\n" 
  puts Film.all
  # ^equivalent to:
  # Film.all.each do |film|
  #   print film.to_s + "\n"
  # end
elsif command == "edit"
  if film = Film.find(options[:id])
    film.update(options)
    puts "Film #{film.id} is now named #{film.name}, released in #{film.year}, directed by #{film.director}, from #{film.country}, in #{film.language}, distributed by #{film.distributor}, viewed on #{film.date}, with a viewing format of #{film.format}, given a personal rating of #{film.rating}, and the following notes: #{film.notes}."
  else
    puts "Film #{options[:id]} couldn't be found."
  end
else
  puts "Command not implemented"
end